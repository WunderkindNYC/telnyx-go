
/*
 * Telnyx API
 *
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * API version: 2.0.0
 * Contact: support@telnyx.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package telnyx

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type MobileOperatorNetworksApiService service
/*
MobileOperatorNetworksApiService List mobile operator networks
Telnyx has a set of GSM mobile operators partners that are available through our mobile network roaming. This resource is entirely managed by Telnyx and may change over time. That means that this resource won&#x27;t allow any write operations for it. Still, it&#x27;s available so it can be used as a support resource that can be related to other resources or become a configuration option.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *MobileOperatorNetworksApiMobileOperatorNetworksGetOpts - Optional Parameters:
     * @param "PageNumber" (optional.Int32) -  The page number to load
     * @param "PageSize" (optional.Int32) -  The size of the page
     * @param "FilterNameStartsWith" (optional.String) -  Filter by name starting with.
     * @param "FilterNameContains" (optional.String) -  Filter by name containing match.
     * @param "FilterNameEndsWith" (optional.String) -  Filter by name ending with.
     * @param "FilterCountryCode" (optional.String) -  Filter by exact country_code.
     * @param "FilterMcc" (optional.String) -  Filter by exact MCC.
     * @param "FilterMnc" (optional.String) -  Filter by exact MNC.
     * @param "FilterTadig" (optional.String) -  Filter by exact TADIG.
@return InlineResponse20014
*/

type MobileOperatorNetworksApiMobileOperatorNetworksGetOpts struct {
    PageNumber optional.Int32
    PageSize optional.Int32
    FilterNameStartsWith optional.String
    FilterNameContains optional.String
    FilterNameEndsWith optional.String
    FilterCountryCode optional.String
    FilterMcc optional.String
    FilterMnc optional.String
    FilterTadig optional.String
}

func (a *MobileOperatorNetworksApiService) MobileOperatorNetworksGet(ctx context.Context, localVarOptionals *MobileOperatorNetworksApiMobileOperatorNetworksGetOpts) (InlineResponse20014, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponse20014
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/mobile_operator_networks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.PageNumber.IsSet() {
		localVarQueryParams.Add("page[number]", parameterToString(localVarOptionals.PageNumber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("page[size]", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterNameStartsWith.IsSet() {
		localVarQueryParams.Add("filter[name][starts_with]", parameterToString(localVarOptionals.FilterNameStartsWith.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterNameContains.IsSet() {
		localVarQueryParams.Add("filter[name][contains]", parameterToString(localVarOptionals.FilterNameContains.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterNameEndsWith.IsSet() {
		localVarQueryParams.Add("filter[name][ends_with]", parameterToString(localVarOptionals.FilterNameEndsWith.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterCountryCode.IsSet() {
		localVarQueryParams.Add("filter[country_code]", parameterToString(localVarOptionals.FilterCountryCode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterMcc.IsSet() {
		localVarQueryParams.Add("filter[mcc]", parameterToString(localVarOptionals.FilterMcc.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterMnc.IsSet() {
		localVarQueryParams.Add("filter[mnc]", parameterToString(localVarOptionals.FilterMnc.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterTadig.IsSet() {
		localVarQueryParams.Add("filter[tadig]", parameterToString(localVarOptionals.FilterTadig.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20014
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v Errors
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
