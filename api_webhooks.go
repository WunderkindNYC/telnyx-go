
/*
 * Telnyx API
 *
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * API version: 2.0.0
 * Contact: support@telnyx.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package telnyx

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type WebhooksApiService service
/*
WebhooksApiService List webhook deliveries
Lists webhook_deliveries for the authenticated user
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *WebhooksApiGetWebhookDeliveriesOpts - Optional Parameters:
     * @param "FilterStatusEq" (optional.String) -  Return only webhook_deliveries matching the given &#x60;status&#x60;
     * @param "FilterWebhookContains" (optional.String) -  Return only webhook deliveries whose &#x60;webhook&#x60; component contains the given text
     * @param "FilterAttemptsContains" (optional.String) -  Return only webhook_deliveries whose &#x60;attempts&#x60; component contains the given text
     * @param "FilterStartedAtGte" (optional.String) -  Return only webhook_deliveries whose delivery started later than or at given ISO 8601 datetime
     * @param "FilterStartedAtLte" (optional.String) -  Return only webhook_deliveries whose delivery started earlier than or at given ISO 8601 datetime
     * @param "FilterFinishedAtGte" (optional.String) -  Return only webhook_deliveries whose delivery finished later than or at given ISO 8601 datetime
     * @param "FilterFinishedAtLte" (optional.String) -  Return only webhook_deliveries whose delivery finished earlier than or at given ISO 8601 datetime
     * @param "PageNumber" (optional.Int32) -  The page number to load
     * @param "PageSize" (optional.Int32) -  The size of the page
@return InlineResponse20045
*/

type WebhooksApiGetWebhookDeliveriesOpts struct {
    FilterStatusEq optional.String
    FilterWebhookContains optional.String
    FilterAttemptsContains optional.String
    FilterStartedAtGte optional.String
    FilterStartedAtLte optional.String
    FilterFinishedAtGte optional.String
    FilterFinishedAtLte optional.String
    PageNumber optional.Int32
    PageSize optional.Int32
}

func (a *WebhooksApiService) GetWebhookDeliveries(ctx context.Context, localVarOptionals *WebhooksApiGetWebhookDeliveriesOpts) (InlineResponse20045, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponse20045
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/webhook_deliveries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.FilterStatusEq.IsSet() {
		localVarQueryParams.Add("filter[status][eq]", parameterToString(localVarOptionals.FilterStatusEq.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterWebhookContains.IsSet() {
		localVarQueryParams.Add("filter[webhook][contains]", parameterToString(localVarOptionals.FilterWebhookContains.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterAttemptsContains.IsSet() {
		localVarQueryParams.Add("filter[attempts][contains]", parameterToString(localVarOptionals.FilterAttemptsContains.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterStartedAtGte.IsSet() {
		localVarQueryParams.Add("filter[started_at][gte]", parameterToString(localVarOptionals.FilterStartedAtGte.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterStartedAtLte.IsSet() {
		localVarQueryParams.Add("filter[started_at][lte]", parameterToString(localVarOptionals.FilterStartedAtLte.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterFinishedAtGte.IsSet() {
		localVarQueryParams.Add("filter[finished_at][gte]", parameterToString(localVarOptionals.FilterFinishedAtGte.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterFinishedAtLte.IsSet() {
		localVarQueryParams.Add("filter[finished_at][lte]", parameterToString(localVarOptionals.FilterFinishedAtLte.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageNumber.IsSet() {
		localVarQueryParams.Add("page[number]", parameterToString(localVarOptionals.PageNumber.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("page[size]", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20045
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
WebhooksApiService Find webhook_delivery details by ID
Provides webhook_delivery debug data, such as timestamps, delivery status and attempts.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Uniquely identifies the webhook_delivery.
@return InlineResponse20046
*/
func (a *WebhooksApiService) GetWebhookDelivery(ctx context.Context, id string) (InlineResponse20046, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue InlineResponse20046
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/webhook_deliveries/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20046
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
